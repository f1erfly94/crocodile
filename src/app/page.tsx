'use client'
import React, { useState, useEffect, useCallback } from 'react';
import { Timer, Users, Trophy, Play, RotateCcw, Settings, BookOpen, ChevronRight, Home, Pause, PlayCircle, Edit2, Check, Eye, EyeOff } from 'lucide-react';

// –¢–∏–ø–∏
type Difficulty = 'easy' | 'medium' | 'hard';
type GameMode = 'team' | 'individual';
type GameState = 'setup' | 'names' | 'playing' | 'results';

interface Word {
  text: string;
  difficulty: Difficulty;
}

interface Player {
  id: number;
  name: string;
  score: number;
}

interface Team {
  id: number;
  name: string;
  score: number;
  streak: number;
}

// –ë–∞–∑–∞ —Å–ª—ñ–≤
const WORDS: Record<Difficulty, string[]> = {
  easy: ['–ö—ñ—à–∫–∞', '–õ—ñ—Ç–∞–∫', '–ü–ª–∞–≤–∞–Ω–Ω—è', '–î–µ—Ä–µ–≤–æ', '–¢–∞–Ω–µ—Ü—å', '–¢–µ–ª–µ—Ñ–æ–Ω', '–ë—ñ–≥', '–°–Ω—ñ–≥', "–ú'—è—á", '–á–∂–∞'],
  medium: ['–°–ø–æ–≥–∞–¥', '–ë—ñ–±–ª—ñ–æ—Ç–µ–∫–∞', '–§–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—è', '–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü—ñ—è', '–¢—É—Ä–±–æ—Ç–∞', '–ï–∫—Å–∫–∞–≤–∞—Ç–æ—Ä', '–ö–æ–Ω—Ñ–ª—ñ–∫—Ç', '–í–µ—Ç–µ—Ä–∏–Ω–∞—Ä', '–ë–∞–ª–∞–Ω—Å', '–ü–∞—Ä–∞—à—É—Ç'],
  hard: ['–ù–æ—Å—Ç–∞–ª—å–≥—ñ—è', '–ö–æ–º–ø—Ä–æ–º—ñ—Å', '–Ü–Ω—Ç—É—ó—Ü—ñ—è', '–ï–≤–æ–ª—é—Ü—ñ—è', '–î–µ–º–æ–∫—Ä–∞—Ç—ñ—è', '–ü—Ä–æ–∫—Ä–∞—Å—Ç–∏–Ω–∞—Ü—ñ—è', '–ë–∞–π–¥—É–∂—ñ—Å—Ç—å', '–ú–µ—Ç–∞—Ñ–æ—Ä–∞', '–Ü–Ω—Ñ–ª—è—Ü—ñ—è', '–°–∞–±–æ—Ç–∞–∂']
};

const POINTS: Record<Difficulty, number> = {
  easy: 1,
  medium: 2,
  hard: 3
};

const CrocodileGame: React.FC = () => {
  const [gameState, setGameState] = useState<GameState>('setup');
  const [gameMode, setGameMode] = useState<GameMode>('team');
  const [playerCount, setPlayerCount] = useState<number>(4);
  const [selectedDifficulties, setSelectedDifficulties] = useState<Difficulty[]>(['easy', 'medium', 'hard']);
  const [singleDifficulty, setSingleDifficulty] = useState<boolean>(false);
  const [roundsCount, setRoundsCount] = useState<number>(10);

  const [teams, setTeams] = useState<Team[]>([
    { id: 1, name: '–ö–æ–º–∞–Ω–¥–∞ 1', score: 0, streak: 0 },
    { id: 2, name: '–ö–æ–º–∞–Ω–¥–∞ 2', score: 0, streak: 0 }
  ]);
  const [players, setPlayers] = useState<Player[]>([]);
  const [isPaused, setIsPaused] = useState<boolean>(false);
  const [currentTeamIndex, setCurrentTeamIndex] = useState<number>(0);
  const [currentPlayerIndex, setCurrentPlayerIndex] = useState<number>(0);

  const [currentWord, setCurrentWord] = useState<Word | null>(null);
  const [showWord, setShowWord] = useState<boolean>(false);
  const [isWordVisible, setIsWordVisible] = useState<boolean>(true);
  const [timeLeft, setTimeLeft] = useState<number>(60);
  const [isTimerRunning, setIsTimerRunning] = useState<boolean>(false);
  const [currentRound, setCurrentRound] = useState<number>(1);
  const [startTime, setStartTime] = useState<number>(0);

  const [showRules, setShowRules] = useState<boolean>(false);

  // –¢–∞–π–º–µ—Ä
  useEffect(() => {
    let interval: NodeJS.Timeout;
    if (isTimerRunning && timeLeft > 0 && !isPaused) {
      interval = setInterval(() => {
        setTimeLeft(prev => {
          if (prev <= 1) {
            setIsTimerRunning(false);
            handleTimeUp();
            return 0;
          }
          return prev - 1;
        });
      }, 1000);
    }
    return () => clearInterval(interval);
  }, [isTimerRunning, timeLeft, isPaused]);

  // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –≥—Ä–∞–≤—Ü—ñ–≤
  useEffect(() => {
    if (gameMode === 'individual') {
      const newPlayers: Player[] = Array.from({ length: playerCount }, (_, i) => ({
        id: i + 1,
        name: `–ì—Ä–∞–≤–µ—Ü—å ${i + 1}`,
        score: 0
      }));
      setPlayers(newPlayers);
    }
  }, [gameMode, playerCount]);

  const getRandomWord = useCallback((): Word => {
    const difficulty = selectedDifficulties[Math.floor(Math.random() * selectedDifficulties.length)];
    const wordsArray = WORDS[difficulty];
    const word = wordsArray[Math.floor(Math.random() * wordsArray.length)];
    return { text: word, difficulty };
  }, [selectedDifficulties]);

  const startGame = () => {
    setGameState('names');
    if (gameMode === 'individual') {
      const newPlayers = Array.from({ length: playerCount }, (_, i) => ({
        id: i + 1,
        name: `–ì—Ä–∞–≤–µ—Ü—å ${i + 1}`,
        score: 0
      }));
      setPlayers(newPlayers);
    }
  };

  const startGameFromNames = () => {
    setGameState('playing');
    setCurrentRound(1);
    if (gameMode === 'team') {
      setTeams(prev => prev.map(t => ({ ...t, score: 0, streak: 0 })));
    } else {
      setPlayers(prev => prev.map(p => ({ ...p, score: 0 })));
    }
    setCurrentTeamIndex(0);
    setCurrentPlayerIndex(0);
  };

  const getNewWord = () => {
    const word = getRandomWord();
    setCurrentWord(word);
    setShowWord(true);
    setIsWordVisible(true);
    setTimeLeft(60);
    setStartTime(Date.now());
  };

  const startTimer = () => {
    setIsTimerRunning(true);
  };

  const handleGuessed = () => {
    if (!currentWord) return;

    const timeSpent = Math.floor((Date.now() - startTime) / 1000);
    const timeTaken = 60 - timeLeft;

    let points = POINTS[currentWord.difficulty];

    // –®–≤–∏–¥–∫—ñ—Å–Ω–∏–π –±–æ–Ω—É—Å
    if (timeTaken <= 20) points += 2;
    else if (timeTaken <= 40) points += 1;

    if (gameMode === 'team') {
      const updatedTeams = [...teams];
      updatedTeams[currentTeamIndex].score += points;
      updatedTeams[currentTeamIndex].streak += 1;

      // –°–µ—Ä—ñ–π–Ω–∏–π –±–æ–Ω—É—Å
      if (updatedTeams[currentTeamIndex].streak === 3) {
        updatedTeams[currentTeamIndex].score += 1;
      } else if (updatedTeams[currentTeamIndex].streak === 5) {
        updatedTeams[currentTeamIndex].score += 3;
        updatedTeams[currentTeamIndex].streak = 0;
      }

      setTeams(updatedTeams);
    } else {
      const updatedPlayers = [...players];
      updatedPlayers[currentPlayerIndex].score += points;
      setPlayers(updatedPlayers);
    }

    nextTurn();
  };

  const handleTimeUp = () => {
    if (gameMode === 'team') {
      const updatedTeams = [...teams];
      updatedTeams[currentTeamIndex].streak = 0;
      setTeams(updatedTeams);
    }

    setTimeout(() => {
      nextTurn();
    }, 2000);
  };

  const nextTurn = () => {
    setIsTimerRunning(false);
    setShowWord(false);
    setCurrentWord(null);
    setIsWordVisible(true);
    setTimeLeft(60);

    if (currentRound >= roundsCount) {
      setGameState('results');
      return;
    }

    if (gameMode === 'team') {
      setCurrentTeamIndex((currentTeamIndex + 1) % 2);
    } else {
      setCurrentPlayerIndex((currentPlayerIndex + 1) % players.length);
    }

    setCurrentRound(prev => prev + 1);
  };

  const resetGame = () => {
    setGameState('setup');
    setCurrentWord(null);
    setShowWord(false);
    setTimeLeft(60);
    setIsTimerRunning(false);
    setCurrentRound(1);
    setCurrentTeamIndex(0);
    setCurrentPlayerIndex(0);
    setIsPaused(false);
    setTeams([
      { id: 1, name: '–ö–æ–º–∞–Ω–¥–∞ 1', score: 0, streak: 0 },
      { id: 2, name: '–ö–æ–º–∞–Ω–¥–∞ 2', score: 0, streak: 0 }
    ]);
    setPlayers([]);
  };

  const toggleDifficulty = (diff: Difficulty) => {
    if (singleDifficulty) {
      // –í —Ä–µ–∂–∏–º—ñ –æ–¥–Ω–æ—ó —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ –ø—Ä–æ—Å—Ç–æ –∑–º—ñ–Ω—é—î–º–æ –≤–∏–±—ñ—Ä
      setSelectedDifficulties([diff]);
    } else {
      // –í —Ä–µ–∂–∏–º—ñ –∫—ñ–ª—å–∫–æ—Ö —Å–∫–ª–∞–¥–Ω–æ—Å—Ç–µ–π
      if (selectedDifficulties.includes(diff)) {
        if (selectedDifficulties.length > 1) {
          setSelectedDifficulties(selectedDifficulties.filter(d => d !== diff));
        }
      } else {
        setSelectedDifficulties([...selectedDifficulties, diff]);
      }
    }
  };

  const toggleDifficultyMode = () => {
    if (!singleDifficulty) {
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –≤ —Ä–µ–∂–∏–º –æ–¥–Ω–æ—ó —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ - –∑–∞–ª–∏—à–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ –ø–µ—Ä—à—É –≤–∏–±—Ä–∞–Ω—É
      setSelectedDifficulties([selectedDifficulties[0]]);
    }
    setSingleDifficulty(!singleDifficulty);
  };

  const updateTeamName = (teamId: number, newName: string) => {
    setTeams(teams.map(team =>
        team.id === teamId ? { ...team, name: newName } : team
    ));
  };

  const updatePlayerName = (playerId: number, newName: string) => {
    setPlayers(players.map(player =>
        player.id === playerId ? { ...player, name: newName } : player
    ));
  };

  const togglePause = () => {
    setIsPaused(!isPaused);
  };

  const toggleWordVisibility = () => {
    setIsWordVisible(!isWordVisible);
  };

  const goToMainMenu = () => {
    if (confirm('–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ? –ü—Ä–æ–≥—Ä–µ—Å –≥—Ä–∏ –±—É–¥–µ –≤—Ç—Ä–∞—á–µ–Ω–æ.')) {
      resetGame();
    }
  };

  const getDifficultyColor = (diff: Difficulty) => {
    switch(diff) {
      case 'easy': return 'bg-green-500';
      case 'medium': return 'bg-yellow-500';
      case 'hard': return 'bg-red-500';
    }
  };

  const getDifficultyLabel = (diff: Difficulty) => {
    switch(diff) {
      case 'easy': return '–õ–µ–≥–∫–æ';
      case 'medium': return '–°–µ—Ä–µ–¥–Ω—å–æ';
      case 'hard': return '–í–∞–∂–∫–æ';
    }
  };

  // –ï–∫—Ä–∞–Ω –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
  if (gameState === 'setup') {
    return (
        <div className="min-h-screen bg-gradient-to-br from-purple-600 via-pink-500 to-red-500 p-4">
          <div className="max-w-2xl mx-auto">
            <div className="text-center mb-8 mt-8">
              <h1 className="text-6xl font-bold text-white mb-4">üêä –ö—Ä–æ–∫–æ–¥–∏–ª</h1>
              <p className="text-xl text-white/90">–ü–æ–∫–∞–∂–∏ —Å–ª–æ–≤–æ –∂–µ—Å—Ç–∞–º–∏!</p>
            </div>

            <div className="bg-white rounded-3xl shadow-2xl p-8 space-y-6">
              <div>
                <label className="block text-lg font-semibold text-gray-800 mb-3">–†–µ–∂–∏–º –≥—Ä–∏</label>
                <div className="grid grid-cols-2 gap-4">
                  <button
                      onClick={() => setGameMode('team')}
                      className={`p-4 rounded-xl border-2 transition-all ${
                          gameMode === 'team'
                              ? 'border-purple-500 bg-purple-50 text-purple-700'
                              : 'border-gray-200 hover:border-gray-300'
                      }`}
                  >
                    <Users className="w-8 h-8 mx-auto mb-2" />
                    <div className="font-semibold">–ö–æ–º–∞–Ω–¥–∏</div>
                    <div className="text-sm text-gray-600">4-20 –≥—Ä–∞–≤—Ü—ñ–≤</div>
                  </button>
                  <button
                      onClick={() => setGameMode('individual')}
                      className={`p-4 rounded-xl border-2 transition-all ${
                          gameMode === 'individual'
                              ? 'border-purple-500 bg-purple-50 text-purple-700'
                              : 'border-gray-200 hover:border-gray-300'
                      }`}
                  >
                    <Trophy className="w-8 h-8 mx-auto mb-2" />
                    <div className="font-semibold">–Ü–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–æ</div>
                    <div className="text-sm text-gray-600">2-10 –≥—Ä–∞–≤—Ü—ñ–≤</div>
                  </button>
                </div>
              </div>

              <div>
                <label className="block text-lg font-semibold text-gray-800 mb-3">
                  –ö—ñ–ª—å–∫—ñ—Å—Ç—å –≥—Ä–∞–≤—Ü—ñ–≤: {playerCount}
                </label>
                <input
                    type="range"
                    min={gameMode === 'team' ? 4 : 2}
                    max={gameMode === 'team' ? 20 : 10}
                    value={playerCount}
                    onChange={(e) => setPlayerCount(Number(e.target.value))}
                    className="w-full h-3 bg-gray-200 rounded-lg appearance-none cursor-pointer"
                />
              </div>

              <div>
                <div className="flex justify-between items-center mb-3">
                  <label className="text-lg font-semibold text-gray-800">–°–∫–ª–∞–¥–Ω—ñ—Å—Ç—å —Å–ª—ñ–≤</label>
                  <button
                      onClick={toggleDifficultyMode}
                      className="text-sm px-3 py-1 bg-gray-100 hover:bg-gray-200 rounded-lg transition-all"
                  >
                    {singleDifficulty ? 'üîí –û–¥–Ω–∞' : 'üîì –ó–º—ñ—à–∞–Ω–æ'}
                  </button>
                </div>
                <div className="flex gap-3">
                  {(['easy', 'medium', 'hard'] as Difficulty[]).map(diff => (
                      <button
                          key={diff}
                          onClick={() => toggleDifficulty(diff)}
                          className={`flex-1 p-3 rounded-xl border-2 transition-all ${
                              selectedDifficulties.includes(diff)
                                  ? `${getDifficultyColor(diff)} text-white border-transparent`
                                  : singleDifficulty && selectedDifficulties.length > 0
                                      ? 'border-gray-200 bg-gray-50 opacity-50 cursor-not-allowed'
                                      : 'border-gray-200 hover:border-gray-300'
                          }`}
                          disabled={singleDifficulty && !selectedDifficulties.includes(diff)}
                      >
                        {getDifficultyLabel(diff)}
                      </button>
                  ))}
                </div>
                <p className="text-xs text-gray-500 mt-2">
                  {singleDifficulty ? '–í—Å—ñ —Å–ª–æ–≤–∞ –æ–¥–Ω—ñ—î—ó —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ' : '–°–ª–æ–≤–∞ —Ä—ñ–∑–Ω–æ—ó —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ'}
                </p>
              </div>

              <div>
                <label className="block text-lg font-semibold text-gray-800 mb-3">
                  –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–∞—É–Ω–¥—ñ–≤: {roundsCount}
                </label>
                <input
                    type="range"
                    min={5}
                    max={20}
                    value={roundsCount}
                    onChange={(e) => setRoundsCount(Number(e.target.value))}
                    className="w-full h-3 bg-gray-200 rounded-lg appearance-none cursor-pointer"
                />
              </div>

              <button
                  onClick={() => setShowRules(true)}
                  className="w-full p-4 bg-blue-500 text-white rounded-xl font-semibold hover:bg-blue-600 transition-all flex items-center justify-center gap-2"
              >
                <BookOpen className="w-5 h-5" />
                –ü—Ä–∞–≤–∏–ª–∞ –≥—Ä–∏
              </button>

              <button
                  onClick={startGame}
                  className="w-full p-6 bg-gradient-to-r from-purple-600 to-pink-600 text-white rounded-xl font-bold text-xl hover:from-purple-700 hover:to-pink-700 transition-all flex items-center justify-center gap-3 shadow-lg"
              >
                <ChevronRight className="w-6 h-6" />
                –î–∞–ª—ñ
              </button>
            </div>
          </div>

          {showRules && (
              <div className="fixed inset-0 bg-black/50 flex items-center justify-center p-4 z-50" onClick={() => setShowRules(false)}>
                <div className="bg-white rounded-2xl p-8 max-w-2xl max-h-[90vh] overflow-y-auto" onClick={e => e.stopPropagation()}>
                  <h2 className="text-3xl font-bold mb-6 text-gray-800">üìã –ü—Ä–∞–≤–∏–ª–∞ –≥—Ä–∏</h2>

                  <div className="space-y-4 text-gray-700">
                    <div>
                      <h3 className="font-bold text-xl mb-2 text-red-600">‚ùå –ó–ê–ë–û–†–û–ù–ï–ù–û:</h3>
                      <ul className="list-disc list-inside space-y-1 ml-2">
                        <li>–ì–æ–≤–æ—Ä–∏—Ç–∏ –±—É–¥—å-—è–∫—ñ —Å–ª–æ–≤–∞</li>
                        <li>–ü–∏—Å–∞—Ç–∏ –≤ –ø–æ–≤—ñ—Ç—Ä—ñ –ª—ñ—Ç–µ—Ä–∏</li>
                        <li>–®–µ–ø–æ—Ç—ñ—Ç–∏ –∞–±–æ –≤–∏–¥–∞–≤–∞—Ç–∏ –∑–≤—É–∫–∏</li>
                        <li>–ú–∞–ª—é–≤–∞—Ç–∏</li>
                        <li>–í–∫–∞–∑—É–≤–∞—Ç–∏ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç–∏ –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥–¥—é</li>
                      </ul>
                    </div>

                    <div>
                      <h3 className="font-bold text-xl mb-2 text-green-600">‚úÖ –î–û–ó–í–û–õ–ï–ù–û:</h3>
                      <ul className="list-disc list-inside space-y-1 ml-2">
                        <li>–ñ–µ—Å—Ç–∏ —Ä—É–∫–∞–º–∏ —Ç–∞ –ø–∞–ª—å—Ü—è–º–∏</li>
                        <li>–†—É—Ö–∏ –≤—Å—ñ–º —Ç—ñ–ª–æ–º</li>
                        <li>–ú—ñ–º—ñ–∫–∞ –æ–±–ª–∏—á—á—è</li>
                        <li>–Ü–º—ñ—Ç–∞—Ü—ñ—è –¥—ñ–π</li>
                        <li>–í–∫–∞–∑—É–≤–∞—Ç–∏ –Ω–∞ —á–∞—Å—Ç–∏–Ω–∏ —Ç—ñ–ª–∞</li>
                      </ul>
                    </div>

                    <div>
                      <h3 className="font-bold text-xl mb-2">‚è±Ô∏è –ß–∞—Å —Ç–∞ –æ—á–∫–∏:</h3>
                      <ul className="list-disc list-inside space-y-1 ml-2">
                        <li>–ù–∞ –∫–æ–∂–Ω–µ —Å–ª–æ–≤–æ ‚Äî 60 —Å–µ–∫—É–Ω–¥</li>
                        <li>–õ–µ–≥–∫–µ —Å–ª–æ–≤–æ: 1 –æ—á–∫–æ</li>
                        <li>–°–µ—Ä–µ–¥–Ω—î —Å–ª–æ–≤–æ: 2 –æ—á–∫–∏</li>
                        <li>–í–∞–∂–∫–µ —Å–ª–æ–≤–æ: 3 –æ—á–∫–∏</li>
                        <li>–ë–æ–Ω—É—Å –∑–∞ —à–≤–∏–¥–∫—ñ—Å—Ç—å (0-20 —Å–µ–∫): +2 –æ—á–∫–∏</li>
                      </ul>
                    </div>
                  </div>

                  <button
                      onClick={() => setShowRules(false)}
                      className="mt-6 w-full p-3 bg-purple-600 text-white rounded-xl font-semibold hover:bg-purple-700"
                  >
                    –ó—Ä–æ–∑—É–º—ñ–ª–æ!
                  </button>
                </div>
              </div>
          )}
        </div>
    );
  }

  // –ï–∫—Ä–∞–Ω –≤–≤–µ–¥–µ–Ω–Ω—è —ñ–º–µ–Ω
  if (gameState === 'names') {
    return (
        <div className="min-h-screen bg-gradient-to-br from-blue-600 via-indigo-600 to-purple-600 p-4">
          <div className="max-w-2xl mx-auto">
            <div className="text-center mb-8 mt-8">
              <h1 className="text-5xl font-bold text-white mb-4">‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å —ñ–º–µ–Ω–∞</h1>
              <p className="text-xl text-white/90">
                {gameMode === 'team' ? '–ù–∞–∑–≤—ñ—Ç—å —Å–≤–æ—ó –∫–æ–º–∞–Ω–¥–∏' : '–Ø–∫ –≤–∞—Å –∑–≤–∞—Ç–∏?'}
              </p>
            </div>

            <div className="bg-white rounded-3xl shadow-2xl p-8 space-y-6">
              {gameMode === 'team' ? (
                  <>
                    <div>
                      <label className="block text-lg font-semibold text-gray-800 mb-3">
                        üîµ –ü–µ—Ä—à–∞ –∫–æ–º–∞–Ω–¥–∞
                      </label>
                      <input
                          type="text"
                          value={teams[0].name}
                          onChange={(e) => updateTeamName(1, e.target.value)}
                          className="w-full p-4 text-lg border-2 border-gray-200 rounded-xl focus:border-purple-500 focus:outline-none transition-all"
                          placeholder="–ù–∞–ø—Ä–∏–∫–ª–∞–¥: –ë–ª–∏—Å–∫–∞–≤–∫–∏"
                          maxLength={20}
                      />
                    </div>
                    <div>
                      <label className="block text-lg font-semibold text-gray-800 mb-3">
                        üî¥ –î—Ä—É–≥–∞ –∫–æ–º–∞–Ω–¥–∞
                      </label>
                      <input
                          type="text"
                          value={teams[1].name}
                          onChange={(e) => updateTeamName(2, e.target.value)}
                          className="w-full p-4 text-lg border-2 border-gray-200 rounded-xl focus:border-purple-500 focus:outline-none transition-all"
                          placeholder="–ù–∞–ø—Ä–∏–∫–ª–∞–¥: –í–æ–≥–Ω–∏–∫–∏"
                          maxLength={20}
                      />
                    </div>
                  </>
              ) : (
                  <div className="max-h-96 overflow-y-auto space-y-4 pr-2">
                    {players.map((player, idx) => (
                        <div key={player.id}>
                          <label className="block text-sm font-semibold text-gray-700 mb-2">
                            üë§ –ì—Ä–∞–≤–µ—Ü—å {idx + 1}
                          </label>
                          <input
                              type="text"
                              value={player.name}
                              onChange={(e) => updatePlayerName(player.id, e.target.value)}
                              className="w-full p-3 border-2 border-gray-200 rounded-xl focus:border-purple-500 focus:outline-none transition-all"
                              placeholder={`–Ü–º'—è –≥—Ä–∞–≤—Ü—è ${idx + 1}`}
                              maxLength={15}
                          />
                        </div>
                    ))}
                  </div>
              )}

              <div className="flex gap-4 pt-4">
                <button
                    onClick={() => setGameState('setup')}
                    className="flex-1 p-4 bg-gray-200 text-gray-700 rounded-xl font-semibold hover:bg-gray-300 transition-all flex items-center justify-center gap-2"
                >
                  <ChevronRight className="w-5 h-5 rotate-180" />
                  –ù–∞–∑–∞–¥
                </button>
                <button
                    onClick={startGameFromNames}
                    className="flex-[2] p-4 bg-gradient-to-r from-green-500 to-emerald-600 text-white rounded-xl font-bold text-lg hover:from-green-600 hover:to-emerald-700 transition-all flex items-center justify-center gap-2 shadow-lg"
                >
                  <Play className="w-6 h-6" />
                  –ü–æ—á–∞—Ç–∏ –≥—Ä—É!
                </button>
              </div>
            </div>
          </div>
        </div>
    );
  }

  // –Ü–≥—Ä–æ–≤–∏–π –µ–∫—Ä–∞–Ω
  if (gameState === 'playing') {
    const currentEntity = gameMode === 'team' ? teams[currentTeamIndex] : players[currentPlayerIndex];

    return (
        <div className="min-h-screen bg-gradient-to-br from-indigo-600 via-purple-600 to-pink-500 p-4">
          <div className="max-w-4xl mx-auto">
            {/* –•–µ–¥–µ—Ä */}
            <div className="bg-white/95 rounded-2xl shadow-xl p-4 mb-6">
              <div className="flex justify-between items-center">
                <div className="flex items-center gap-3">
                  <button
                      onClick={goToMainMenu}
                      className="p-2 hover:bg-gray-100 rounded-lg transition-all"
                      title="–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"
                  >
                    <Home className="w-6 h-6 text-gray-600" />
                  </button>
                  <div>
                    <div className="text-sm text-gray-600">–†–∞—É–Ω–¥ {currentRound} –∑ {roundsCount}</div>
                    <div className="text-xl font-bold text-gray-800">
                      {gameMode === 'team' ? currentEntity.name : `–ü–æ–∫–∞–∑—É—î: ${currentEntity.name}`}
                    </div>
                  </div>
                </div>
                <div className="flex items-center gap-2">
                  {isTimerRunning && (
                      <button
                          onClick={togglePause}
                          className={`p-2 rounded-lg transition-all ${
                              isPaused ? 'bg-green-100 hover:bg-green-200' : 'bg-yellow-100 hover:bg-yellow-200'
                          }`}
                          title={isPaused ? '–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏' : '–ü–∞—É–∑–∞'}
                      >
                        {isPaused ? <PlayCircle className="w-6 h-6 text-green-600" /> : <Pause className="w-6 h-6 text-yellow-600" />}
                      </button>
                  )}
                  <button
                      onClick={goToMainMenu}
                      className="p-2 hover:bg-gray-100 rounded-lg transition-all"
                      title="–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è"
                  >
                    <Settings className="w-6 h-6 text-gray-600" />
                  </button>
                </div>
              </div>
            </div>

            {/* –¢–∞–±–ª–∏—Ü—è –æ—á–æ–∫ */}
            <div className="grid grid-cols-2 gap-4 mb-6">
              {gameMode === 'team' ? (
                  teams.map((team, idx) => (
                      <div
                          key={team.id}
                          className={`bg-white rounded-2xl p-6 shadow-lg transition-all ${
                              idx === currentTeamIndex ? 'ring-4 ring-yellow-400' : ''
                          }`}
                      >
                        <div className="text-lg font-semibold text-gray-700">{team.name}</div>
                        <div className="text-4xl font-bold text-purple-600">{team.score}</div>
                        {team.streak > 0 && (
                            <div className="text-sm text-orange-600 font-semibold mt-1">
                              üî• –°–µ—Ä—ñ—è: {team.streak}
                            </div>
                        )}
                      </div>
                  ))
              ) : (
                  players.slice(0, 2).map((player, idx) => (
                      <div
                          key={player.id}
                          className={`bg-white rounded-2xl p-6 shadow-lg transition-all ${
                              idx === currentPlayerIndex ? 'ring-4 ring-yellow-400' : ''
                          }`}
                      >
                        <div className="text-lg font-semibold text-gray-700">{player.name}</div>
                        <div className="text-4xl font-bold text-purple-600">{player.score}</div>
                      </div>
                  ))
              )}
            </div>

            {/* –û—Å–Ω–æ–≤–Ω–∞ —ñ–≥—Ä–æ–≤–∞ –∑–æ–Ω–∞ */}
            <div className="bg-white rounded-3xl shadow-2xl p-8">
              {/* –¢–∞–π–º–µ—Ä */}
              <div className="mb-8">
                <div className="flex items-center justify-center gap-4 mb-4">
                  <Timer className="w-8 h-8 text-gray-600" />
                  <div className="text-6xl font-bold text-gray-800">{timeLeft}</div>
                </div>
                <div className="w-full bg-gray-200 rounded-full h-4 overflow-hidden">
                  <div
                      className={`h-full transition-all duration-1000 ${
                          timeLeft > 40 ? 'bg-green-500' : timeLeft > 20 ? 'bg-yellow-500' : 'bg-red-500'
                      }`}
                      style={{ width: `${(timeLeft / 60) * 100}%` }}
                  />
                </div>
              </div>

              {/* –°–ª–æ–≤–æ */}
              {!currentWord ? (
                  <div className="text-center space-y-6">
                    <p className="text-xl text-gray-700">–ü–æ–∫–∞–∑—É–≤–∞—á –≥–æ—Ç–æ–≤–∏–π?</p>
                    <button
                        onClick={getNewWord}
                        className="px-8 py-4 bg-gradient-to-r from-green-500 to-emerald-600 text-white rounded-2xl font-bold text-xl hover:from-green-600 hover:to-emerald-700 transition-all shadow-lg"
                    >
                      –û—Ç—Ä–∏–º–∞—Ç–∏ —Å–ª–æ–≤–æ
                    </button>
                  </div>
              ) : !isTimerRunning ? (
                  <div className="text-center space-y-6">
                    <div className="bg-gradient-to-r from-purple-100 to-pink-100 rounded-2xl p-8 mb-6 relative">
                      <button
                          onClick={toggleWordVisibility}
                          className="absolute top-4 right-4 p-2 bg-white/80 hover:bg-white rounded-lg transition-all shadow-md"
                          title={isWordVisible ? '–°—Ö–æ–≤–∞—Ç–∏ —Å–ª–æ–≤–æ' : '–ü–æ–∫–∞–∑–∞—Ç–∏ —Å–ª–æ–≤–æ'}
                      >
                        {isWordVisible ? (
                            <EyeOff className="w-6 h-6 text-purple-600" />
                        ) : (
                            <Eye className="w-6 h-6 text-purple-600" />
                        )}
                      </button>

                      <div className="text-sm text-purple-600 font-semibold mb-2 uppercase">
                        {getDifficultyLabel(currentWord.difficulty)}
                      </div>

                      {isWordVisible ? (
                          <>
                            <div className="text-5xl font-bold text-purple-900 mb-4">
                              {currentWord.text}
                            </div>
                            <div className="text-gray-600">
                              –ü–æ–¥—É–º–∞–π—Ç–µ 5 —Å–µ–∫—É–Ω–¥, —è–∫ –ø–æ–∫–∞–∑–∞—Ç–∏ —Ü–µ —Å–ª–æ–≤–æ
                            </div>
                          </>
                      ) : (
                          <>
                            <div className="text-5xl font-bold text-purple-300 mb-4 select-none">
                              ‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢
                            </div>
                            <div className="text-gray-600">
                              –°–ª–æ–≤–æ –ø—Ä–∏—Ö–æ–≤–∞–Ω–æ
                            </div>
                          </>
                      )}
                    </div>
                    <button
                        onClick={startTimer}
                        className="px-8 py-4 bg-gradient-to-r from-blue-500 to-indigo-600 text-white rounded-2xl font-bold text-xl hover:from-blue-600 hover:to-indigo-700 transition-all shadow-lg"
                    >
                      –ü–æ—á–∞—Ç–∏ –ø–æ–∫–∞–∑—É–≤–∞—Ç–∏!
                    </button>
                  </div>
              ) : (
                  <div className="text-center space-y-6">
                    <div className="bg-gradient-to-r from-yellow-100 to-orange-100 rounded-2xl p-12 relative">
                      <button
                          onClick={toggleWordVisibility}
                          className="absolute top-4 right-4 p-2 bg-white/80 hover:bg-white rounded-lg transition-all shadow-md"
                          title={isWordVisible ? '–°—Ö–æ–≤–∞—Ç–∏ —Å–ª–æ–≤–æ' : '–ü–æ–∫–∞–∑–∞—Ç–∏ —Å–ª–æ–≤–æ'}
                      >
                        {isWordVisible ? (
                            <EyeOff className="w-6 h-6 text-orange-600" />
                        ) : (
                            <Eye className="w-6 h-6 text-orange-600" />
                        )}
                      </button>

                      {isWordVisible ? (
                          <>
                            <div className="text-sm text-orange-600 font-semibold mb-2 uppercase">
                              {getDifficultyLabel(currentWord.difficulty)}
                            </div>
                            <div className="text-4xl font-bold text-gray-800 mb-4">
                              {currentWord.text}
                            </div>
                          </>
                      ) : (
                          <>
                            <div className="text-6xl mb-4">üé≠</div>
                            <div className="text-2xl font-bold text-gray-800">
                              {isPaused ? '–ì—Ä–∞ –Ω–∞ –ø–∞—É–∑—ñ' : '–ü–æ–∫–∞–∑—É—î–º–æ —Å–ª–æ–≤–æ...'}
                            </div>
                          </>
                      )}

                      {!isWordVisible && (
                          <div className="text-gray-600 mt-2">
                            {isPaused ? '–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –ø–∞—É–∑–∏ —â–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏' : '–ü–æ–∫–∞–∑—É–≤–∞—á –±–∞—á–∏—Ç—å —Å–ª–æ–≤–æ –Ω–∞ —Å–≤–æ—î–º—É –µ–∫—Ä–∞–Ω—ñ'}
                          </div>
                      )}
                    </div>

                    {!isPaused && (
                        <div className="flex gap-4 justify-center">
                          <button
                              onClick={handleGuessed}
                              className="px-8 py-4 bg-gradient-to-r from-green-500 to-emerald-600 text-white rounded-2xl font-bold text-xl hover:from-green-600 hover:to-emerald-700 transition-all shadow-lg"
                          >
                            ‚úì –í–≥–∞–¥–∞–ª–∏!
                          </button>
                        </div>
                    )}
                  </div>
              )}
            </div>

            {/* –ü–æ–∫–∞–∑—É—î–º–æ –≤—Å—ñ—Ö –≥—Ä–∞–≤—Ü—ñ–≤ –≤ —ñ–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–æ–º—É —Ä–µ–∂–∏–º—ñ */}
            {gameMode === 'individual' && players.length > 2 && (
                <div className="mt-6 bg-white/90 rounded-2xl p-4">
                  <div className="text-sm font-semibold text-gray-600 mb-2">–í—Å—ñ –≥—Ä–∞–≤—Ü—ñ:</div>
                  <div className="grid grid-cols-3 gap-2">
                    {players.map((player, idx) => (
                        <div
                            key={player.id}
                            className={`p-2 rounded-lg text-center ${
                                idx === currentPlayerIndex ? 'bg-purple-100 ring-2 ring-purple-400' : 'bg-gray-50'
                            }`}
                        >
                          <div className="text-xs font-semibold">{player.name}</div>
                          <div className="text-lg font-bold text-purple-600">{player.score}</div>
                        </div>
                    ))}
                  </div>
                </div>
            )}
          </div>
        </div>
    );
  }

  // –ï–∫—Ä–∞–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
  if (gameState === 'results') {
    const winner = gameMode === 'team'
        ? teams.reduce((prev, current) => (prev.score > current.score ? prev : current))
        : players.reduce((prev, current) => (prev.score > current.score ? prev : current));

    const sortedEntities = gameMode === 'team'
        ? [...teams].sort((a, b) => b.score - a.score)
        : [...players].sort((a, b) => b.score - a.score);

    return (
        <div className="min-h-screen bg-gradient-to-br from-yellow-400 via-orange-500 to-red-500 p-4 flex items-center justify-center">
          <div className="max-w-2xl w-full">
            <div className="text-center mb-8">
              <div className="text-8xl mb-4">üèÜ</div>
              <h1 className="text-5xl font-bold text-white mb-2">–ü–µ—Ä–µ–º–æ–∂–µ—Ü—å!</h1>
              <div className="text-3xl font-bold text-white/90">
                {winner.name}
              </div>
              <div className="text-6xl font-bold text-white mt-4">
                {winner.score} –æ—á–æ–∫
              </div>
            </div>

            <div className="bg-white rounded-3xl shadow-2xl p-8 mb-6">
              <h2 className="text-2xl font-bold text-gray-800 mb-6 text-center">–ü—ñ–¥—Å—É–º–∫–æ–≤–∞ —Ç–∞–±–ª–∏—Ü—è</h2>
              <div className="space-y-3">
                {sortedEntities.map((entity, idx) => (
                    <div
                        key={entity.id}
                        className={`flex items-center justify-between p-4 rounded-xl ${
                            idx === 0 ? 'bg-gradient-to-r from-yellow-100 to-orange-100' :
                                idx === 1 ? 'bg-gray-100' :
                                    'bg-gray-50'
                        }`}
                    >
                      <div className="flex items-center gap-4">
                        <div className="text-3xl font-bold text-gray-400">
                          {idx === 0 ? 'ü•á' : idx === 1 ? 'ü•à' : idx === 2 ? 'ü•â' : `${idx + 1}.`}
                        </div>
                        <div className="text-xl font-semibold text-gray-800">{entity.name}</div>
                      </div>
                      <div className="text-3xl font-bold text-purple-600">{entity.score}</div>
                    </div>
                ))}
              </div>
            </div>

            <button
                onClick={resetGame}
                className="w-full p-6 bg-white text-purple-600 rounded-2xl font-bold text-xl hover:bg-gray-50 transition-all shadow-lg flex items-center justify-center gap-3"
            >
              <RotateCcw className="w-6 h-6" />
              –ì—Ä–∞—Ç–∏ –∑–Ω–æ–≤—É
            </button>
          </div>
        </div>
    );
  }

  return null;
};

export default CrocodileGame;